[
    {
        "class_name": "Test",
        "id": 60,
        "name": "polyCAT",
        "accessibility": 2,
        "protected": "1",
        "archived": "0",
        "visibility": 2,
        "type": 1,
        "code": "library(catR)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"custom\") {\n    table = ib$custom_table\n    question_column = ib$custom_question_column$column\n    response_options_column = ib$custom_response_options_column$column\n    irt_discrimination_column = ib$custom_irt_discrimination_column$column\n    cb_group_column = ib$custom_cb_group_column$column\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{irt_discrimination_column}}` AS `irt_discrimination`, `{{cb_group_column}}` AS `cb_group` FROM `{{table}}`\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      irt_discrimination_column=irt_discrimination_column,\n      cb_group_column=cb_group_column,\n      table=table\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\n\ngetContent = function(question) {\n  \n  content = paragraph #don't know what this does!\n  content = paste0(content, \"<table class='polyCATResponseTable'>\")\n  content = paste0(content, \"<tr>\")\n  content = paste0(content, \"<th class='polyCATHeaderCell'><\/th>\")\n  \n  # add other header and then response cells based on how many response options there are.\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomize_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n\n    #add the table headings with the option labels\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<th class='polyCATHeaderCell'>\",option$label,\"<\/th>\")\n    }\n    \n    #next line in the table - add the question\n    content = paste0(content, \"<\/tr><tr><td class='polyCATQuestionCell'>\", question$question, \"<\/td>\")                   \n    \n    #add the response radio options to the table.\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<td class='polyCATresponseButtonCell'><label for='input_response_\",i,\"' class='polyCATLabel'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \/><\/label><\/td>\")\n    }\n                       \n    content = paste0(content, \"<\/tr><\/table>\")\n\n                       \n                       \n    return(content)\n\n  } else {\n    stop(\"Question does not have any response options\")\n    #open question\n    #content = paste0(\"<div><input type='text' name='response' style='width:100%;' \/><\/div>\")\n  }\n  \n  \n}\n\n# when the user responds to an item, it returns the Value of their response. We need to take this value and then find out what response column it refers to in the item bank (i.e. response 0? response 4?)\ngetResponseNumber = function(response = NULL, questions) {\n  print(\"matching response number\")\n  print(response)\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      if (is.null(response)) { #user did not respond to the question. Presumably the time ran out or something like that. In that case, just take the middle option.\n        print(paste0(\"Warning: User did not respond to the question. Taking option \", round((dim(options)[1] + 0.1) \/ 2, 0), \" as their response.\")) #here the first response is number 1. below it's 0 which is why we do -1.\n        return (round((dim(options)[1] + 0.1) \/ 2, 0) - 1) #do rounding because there might be an odd number of responses. R rounding takes 0.5 down to 0, so add 0.1 so that it's 0.6 and goes up to 1.\n      } else if (option$value == response) { #have we found the correct response option?\n        return (i - 1) #i - 1 because catR wants the responses to start from 0. \n      }\n    }\n    \n    stop(\"User's response did not match any of the options in the database\")\n\n  } else {\n    stop(\"Question does not have any response options\")\n  }\n\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  print(sr_accuracy)\n  print(sr_accuracy$enabled)\n  print(as.numeric(sr_accuracy$accuracy))\n  print(sem)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem) {\n  table = \"default_polycat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    theta_column = rb$custom_theta_column$column\n    sem_column = rb$custom_sem_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{theta_column}}`={{theta}}, `{{sem_column}}`={{sem}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\n# nasty function used by getParamBank to unlist the parameters from the questions storage.\nunlistParameters = function(questions) {\n  \n  param_bank = NULL\n  maxresponses = 0\n \n    #find the max number of responses (there must be an easier way to do it that doesn't involve going through each item one at a time.\n    for (i in 1:nrow(questions)) {  \n      p = questions[i,]$response_options\n\n      if(is.character(p)) { \n        p = fromJSON(p)\n      }\n      \n      if (maxresponses < length(p)) {\n        maxresponses = length(p)\n      } \n    }\n    \n    param_bank = matrix(NA, ncol=maxresponses, nrow=nrow(questions)) #set up empty matrix with max cols defined by max response options, and nrow defined by number of questions\n    \n    for (i in 1:nrow(questions)) {   \n      p = questions[i,]$response_options\n\n      if(is.character(p)) { \n        p = fromJSON(p)\n      }\n      \n      for(j in 1:length(p)) {\n        param_bank[i,j] = p[[j]]$irt_parameter #puts each parameter into the matrix one at a time.\n      } \n\n    }   \n    \n    param_bank = apply(param_bank, 2, function (x) { as.numeric(x) } ) #make it numeric\n\n    param_bank = param_bank[,-1] #get rid of first column which should just be NAs.\n  \n  return(param_bank)\n  \n}\n\n#look for any obvious mistakes in the parameter bank and give out warnings.\ncheckParamBank = function (poly_model, param_bank, questions) {\n  print(\"Parameter bank:\")\n  print(param_bank)\n  \n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    # look for any missing discriminations\n    missed = which(is.na(param_bank[,1]))\n    missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n    if (length(missing_ids) > 0) {\n    \tprint(paste0(c(\"Warning: The following item ids do not have a discrimination parameter set, as required by your model, and therefore will only be used if there are no other valid items:\", missing_ids, \". See the parameter bank above; the first column contains the discrimination parameter.\"), collapse=\" \"))\n    }\n  }\n  \n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    diffcol = 2\n  } else {\n   \tdiffcol = 1\n  }\n  \n  #look for missing difficulty parameters from first column (i.e. it will only find a problem if the first column is missing)\n  missed = which(is.na(param_bank[,diffcol]))\n  missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n  if (length(missing_ids) > 0) {\n  \tstop(paste0(c(\"The following item ids are missing a difficulty parameter for the first response option:\", missing_ids, \". See the parameter bank above.\"), collapse=\" \")) \n  }\n  return(TRUE)\n}\n\n#gets the parameter bank. Based on the type of model there are different parameters.\ngetParamBank = function(poly_model, questions) {\n  print(\"getParamBank\")\n  #print(questions)\n  #print(questions[1,]$response_options)\n  #print(poly_model)\n  \n  \n  \n  if (poly_model == \"PCM\") { #PCM has just the parameters based on number of response options - 1.\n    \n    param_bank = unlistParameters(questions)\n    \n  } else if (poly_model == \"GRM\") { #GRM has the same parameters as response options, but one of them is discrimination.\n    param_bank = unlistParameters(questions)\n       \n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n   \n  } else if (poly_model == \"GPCM\") { #GPCM has the same parameters as response options, but one of them is discrimination.\n    \n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n    \n  }\n    \n      \n  checkParamBank(poly_model, param_bank, questions)\n    \n  return(param_bank)\n  \n  \n}\n\n\nquestions = getQuestions()\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = getParamBank(poly_model, questions)\nrb = fromJSON(response_bank)\ntheta = 0\nsem = 1\nout = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = paste0(\"<div class='button_panel button_panel_cat'><button name='next' class='cat_button'>\",button_label,\"<\/button><\/div>\")\nresponse_vector = c()\n\ncurrent_item = 1\nif(item_debug == \"0\") { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      #correct = 0\n      #if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      response_vector = c(response_vector, getResponseNumber(response$response))\n      out = c(out, current_item)\n      print(paste0(\"out = \", out))\n      print(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F))\n      theta <- thetaEst(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"theta = \", theta))\n      sem <- semTheta(theta, matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"sem = \", sem))\n      saveResponse(response, question, rb, theta, sem)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)",
        "resumable": "0",
        "outdated": "0",
        "description": "",
        "variables": [
            {
                "class_name": "TestVariable",
                "id": 892,
                "name": "answered",
                "type": 2,
                "description": "",
                "passableThroughUrl": "0",
                "value": "0",
                "test": 60,
                "parentVariable": 346
            },
            {
                "class_name": "TestVariable",
                "id": 893,
                "name": "paragraph",
                "type": 0,
                "description": "<p>polyCAT page paragraph<\/p>\n",
                "passableThroughUrl": "0",
                "value": "<p>Please answer the question below:<\/p>\n",
                "test": 60,
                "parentVariable": 347
            },
            {
                "class_name": "TestVariable",
                "id": 894,
                "name": "button_label",
                "type": 0,
                "description": "<p>CAT page continue button label<\/p>\n",
                "passableThroughUrl": "0",
                "value": "continue",
                "test": 60,
                "parentVariable": 348
            },
            {
                "class_name": "TestVariable",
                "id": 895,
                "name": "item_bank",
                "type": 0,
                "description": "<p>polyCAT item bank definition.<\/p>\n",
                "passableThroughUrl": "0",
                "value": "{\"table_type\":\"direct\",\"direct_table\":[{\"id\":\"1\",\"question\":\"<p>If I see someone I know well on the street, I say hello.<\/p>\\n\",\"response_options\":[{\"value\":\"1\",\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-3\"},{\"value\":\"2\",\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-2.6\"},{\"value\":\"3\",\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"-2.2\"},{\"value\":\"4\",\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"-1.8\"},{\"value\":\"5\",\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"-1.4\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"},{\"id\":\"2\",\"question\":\"<p>I like parties<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-1\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-0.6\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"0\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"0.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"1\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"},{\"id\":\"3\",\"question\":\"<p>I despise being alone even for one minute<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"1.4\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"1.8\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"2.2\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"2.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"3\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"}],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_response_options_column\":{},\"custom_discrimination_column\":{},\"custom_test_id_column\":{},\"custom_cb_group_column\":{},\"custom_irt_discrimination_column\":{}}",
                "test": 60,
                "parentVariable": 349
            },
            {
                "class_name": "TestVariable",
                "id": 896,
                "name": "response_bank",
                "type": 0,
                "description": "<p>Response bank definition<\/p>\n",
                "passableThroughUrl": "0",
                "value": "{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_time_taken_column\":{},\"custom_session_id_column\":{},\"custom_theta_column\":{},\"custom_sem_column\":{}}",
                "test": 60,
                "parentVariable": 350
            },
            {
                "class_name": "TestVariable",
                "id": 897,
                "name": "stopping_time",
                "type": 0,
                "description": "<p>Time-based stopping rule that will stop the test when the specified number of seconds has passed<\/p>\n",
                "passableThroughUrl": "0",
                "value": "{\"type\":\"\",\"time_limit\":\"\"}",
                "test": 60,
                "parentVariable": 351
            },
            {
                "class_name": "TestVariable",
                "id": 898,
                "name": "stopping_item_count",
                "type": 0,
                "description": "<p>Item count-based stopping rule that will stop the test after the specified number of items is answered<\/p>\n",
                "passableThroughUrl": "0",
                "value": "{\"enabled\":\"0\",\"count\":\"\"}",
                "test": 60,
                "parentVariable": 352
            },
            {
                "class_name": "TestVariable",
                "id": 899,
                "name": "stopping_accuracy",
                "type": 0,
                "description": "<p>Accuracy-based stopping rule in SEM units that will stop the test when at least certain accuracy is reached<\/p>\n",
                "passableThroughUrl": "0",
                "value": "{\"enabled\":\"0\",\"accuracy\":\"\"}",
                "test": 60,
                "parentVariable": 353
            },
            {
                "class_name": "TestVariable",
                "id": 900,
                "name": "scoring_method",
                "type": 0,
                "description": "<p>Ability estimator<\/p>\n",
                "passableThroughUrl": "0",
                "value": "BM",
                "test": 60,
                "parentVariable": 354
            },
            {
                "class_name": "TestVariable",
                "id": 901,
                "name": "next_item_criterion",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": "MFI",
                "test": 60,
                "parentVariable": 355
            },
            {
                "class_name": "TestVariable",
                "id": 902,
                "name": "randomesque",
                "type": 0,
                "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                "passableThroughUrl": "0",
                "value": "1",
                "test": 60,
                "parentVariable": 356
            },
            {
                "class_name": "TestVariable",
                "id": 903,
                "name": "randomize_response_options",
                "type": 0,
                "description": "<p>Check if you want order of response options to be random<\/p>\n",
                "passableThroughUrl": "0",
                "value": "0",
                "test": 60,
                "parentVariable": 357
            },
            {
                "class_name": "TestVariable",
                "id": 904,
                "name": "no_answer_alert",
                "type": 0,
                "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                "passableThroughUrl": "0",
                "value": "No answer given!",
                "test": 60,
                "parentVariable": 358
            },
            {
                "class_name": "TestVariable",
                "id": 905,
                "name": "session",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 359
            },
            {
                "class_name": "TestVariable",
                "id": 906,
                "name": "score",
                "type": 1,
                "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 360
            },
            {
                "class_name": "TestVariable",
                "id": 907,
                "name": "inserts",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 361
            },
            {
                "class_name": "TestVariable",
                "id": 908,
                "name": "item_debug",
                "type": 0,
                "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                "passableThroughUrl": "0",
                "value": "0",
                "test": 60,
                "parentVariable": 362
            },
            {
                "class_name": "TestVariable",
                "id": 909,
                "name": "out_of_time",
                "type": 2,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 363
            },
            {
                "class_name": "TestVariable",
                "id": 910,
                "name": "cb",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": "{\"enabled\":\"0\",\"props\":[]}",
                "test": 60,
                "parentVariable": 364
            },
            {
                "class_name": "TestVariable",
                "id": 911,
                "name": "title",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": "DEMO TEST",
                "test": 60,
                "parentVariable": 365
            },
            {
                "class_name": "TestVariable",
                "id": 912,
                "name": "template_def",
                "type": 0,
                "description": "",
                "passableThroughUrl": "0",
                "value": "{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}",
                "test": 60,
                "parentVariable": 366
            },
            {
                "class_name": "TestVariable",
                "id": 913,
                "name": "template_def",
                "type": 1,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 367
            },
            {
                "class_name": "TestVariable",
                "id": 914,
                "name": "session",
                "type": 1,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 368
            },
            {
                "class_name": "TestVariable",
                "id": 915,
                "name": ".branch",
                "type": 1,
                "description": "",
                "passableThroughUrl": "0",
                "value": null,
                "test": 60,
                "parentVariable": 371
            },
            {
                "class_name": "TestVariable",
                "id": 916,
                "name": "poly_model",
                "type": 0,
                "description": "<p>The&nbsp;Polytomous IRT Model that has produced the item parameters.<\/p>\n",
                "passableThroughUrl": "0",
                "value": "PCM",
                "test": 60,
                "parentVariable": 480
            }
        ],
        "sourceWizard": 15,
        "sourceWizardObject": {
            "class_name": "TestWizard",
            "id": 15,
            "name": "polyCAT",
            "description": "",
            "accessibility": 0,
            "protected": "1",
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 33,
                    "title": "Presentation",
                    "description": "<p>polyCAT presentation options<\/p>\n",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 103,
                            "label": "Paragraph",
                            "description": "<p>polyCAT page paragraph<\/p>\n",
                            "hideCondition": "",
                            "type": 2,
                            "passableThroughUrl": "0",
                            "value": "<p>Please answer the question below:<\/p>\n",
                            "testVariable": 347,
                            "name": "paragraph",
                            "wizardStep": 33,
                            "stepTitle": "Presentation",
                            "order": 2,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 104,
                            "label": "Button label",
                            "description": "<p>CAT page continue button label<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "continue",
                            "testVariable": 348,
                            "name": "button_label",
                            "wizardStep": 33,
                            "stepTitle": "Presentation",
                            "order": 4,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 105,
                            "label": "No answer alert",
                            "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "No answer given!",
                            "testVariable": 358,
                            "name": "no_answer_alert",
                            "wizardStep": 33,
                            "stepTitle": "Presentation",
                            "order": 3,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 106,
                            "label": "Title",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "DEMO TEST",
                            "testVariable": 365,
                            "name": "title",
                            "wizardStep": 33,
                            "stepTitle": "Presentation",
                            "order": 1,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 34,
                    "title": "Item bank",
                    "description": "",
                    "orderNum": 1,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 109,
                            "label": "Randomize response options order",
                            "description": "<p>Check if you want order of response options to be random<\/p>\n",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "0",
                            "testVariable": 357,
                            "name": "randomize_response_options",
                            "wizardStep": 34,
                            "stepTitle": "Item bank",
                            "order": 2,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 110,
                            "label": "Item bank",
                            "description": "<p>polyCAT item bank definition.<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"direct\",\"direct_table\":[{\"id\":\"1\",\"question\":\"<p>If I see someone I know well on the street, I say hello.<\/p>\\n\",\"response_options\":[{\"value\":\"1\",\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-3\"},{\"value\":\"2\",\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-2.6\"},{\"value\":\"3\",\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"-2.2\"},{\"value\":\"4\",\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"-1.8\"},{\"value\":\"5\",\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"-1.4\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"},{\"id\":\"2\",\"question\":\"<p>I like parties<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-1\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-0.6\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"0\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"0.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"1\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"},{\"id\":\"3\",\"question\":\"<p>I despise being alone even for one minute<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"1.4\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"1.8\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"2.2\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"2.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"3\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\"}],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_response_options_column\":{},\"custom_discrimination_column\":{},\"custom_test_id_column\":{},\"custom_cb_group_column\":{},\"custom_irt_discrimination_column\":{}}",
                            "testVariable": 349,
                            "name": "item_bank",
                            "wizardStep": 34,
                            "stepTitle": "Item bank",
                            "order": 1,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "direct",
                                                    "label": "direct",
                                                    "order": 0
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom",
                                                    "order": 1
                                                }
                                            ]
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "direct_table",
                                        "label": "Table",
                                        "definition": {
                                            "placeholder": 0,
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": 0,
                                                    "fields": [
                                                        {
                                                            "type": 0,
                                                            "name": "id",
                                                            "label": "Id",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 2,
                                                            "name": "question",
                                                            "label": "Question",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 10,
                                                            "name": "response_options",
                                                            "label": "Response_options",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "element": {
                                                                    "type": 9,
                                                                    "definition": {
                                                                        "placeholder": 0,
                                                                        "fields": [
                                                                            {
                                                                                "type": 0,
                                                                                "name": "value",
                                                                                "label": "Value",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": 2,
                                                                                "name": "label",
                                                                                "label": "Label",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": 0,
                                                                                "name": "irt_parameter",
                                                                                "label": "IRT Parameter (betaj or deltaj)",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "irt_discrimination",
                                                            "label": "IRT_discrimination",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "cb_group",
                                                            "label": "CB_group",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "hideCondition": "parent.table_type != \"direct\"",
                                        "order": 1
                                    },
                                    {
                                        "type": 6,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_question_column",
                                        "label": "Custom question column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 3
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_response_options_column",
                                        "label": "Custom response options column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 4
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_irt_discrimination_column",
                                        "label": "Custom IRT discrimination column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 5
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_cb_group_column",
                                        "label": "Custom CB group column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 10
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 135,
                            "label": "Polytomous IRT Model",
                            "description": "<p>The&nbsp;Polytomous IRT Model that has produced the item parameters.<\/p>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "PCM",
                            "testVariable": 480,
                            "name": "poly_model",
                            "wizardStep": 34,
                            "stepTitle": "Item bank",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "PCM",
                                        "label": "PCM",
                                        "order": 0
                                    },
                                    {
                                        "value": "GRM",
                                        "label": "GRM",
                                        "order": 1
                                    },
                                    {
                                        "value": "GPCM",
                                        "label": "GPCM",
                                        "order": 2
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 35,
                    "title": "polyCAT options",
                    "description": "",
                    "orderNum": 2,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 111,
                            "label": "Next item criterion",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "MFI",
                            "testVariable": 355,
                            "name": "next_item_criterion",
                            "wizardStep": 35,
                            "stepTitle": "polyCAT options",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "MFI",
                                        "label": "MFI"
                                    },
                                    {
                                        "value": "bOpt",
                                        "label": "bOpt"
                                    },
                                    {
                                        "value": "random",
                                        "label": "random"
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 112,
                            "label": "Next item randomesque",
                            "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 356,
                            "name": "randomesque",
                            "wizardStep": 35,
                            "stepTitle": "polyCAT options",
                            "order": 1,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 113,
                            "label": "Scoring method",
                            "description": "<p>Ability estimator<\/p>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "BM",
                            "testVariable": 354,
                            "name": "scoring_method",
                            "wizardStep": 35,
                            "stepTitle": "polyCAT options",
                            "order": 2,
                            "wizard": 15,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "BM",
                                        "label": "BM"
                                    },
                                    {
                                        "value": "ML",
                                        "label": "ML"
                                    },
                                    {
                                        "value": "WL",
                                        "label": "WL"
                                    },
                                    {
                                        "value": "EAP",
                                        "label": "EAP"
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 114,
                            "label": "Content Balancing",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"props\":[]}",
                            "testVariable": 364,
                            "name": "cb",
                            "wizardStep": 35,
                            "stepTitle": "polyCAT options",
                            "order": 3,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "props",
                                        "label": "Group proportions",
                                        "definition": {
                                            "placeholder": 0,
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": 0,
                                                    "fields": [
                                                        {
                                                            "type": 0,
                                                            "name": "name",
                                                            "label": "Group name",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "prop",
                                                            "label": "Group proportion",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "order": 1,
                                        "hideCondition": "parent.enabled == \"0\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 36,
                    "title": "Stopping rules",
                    "description": "",
                    "orderNum": 3,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 115,
                            "label": "Time-based stopping rule",
                            "description": "<p>Time-based stopping rule that will stop the test when the specified number of seconds has passed<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"type\":\"\",\"time_limit\":\"\"}",
                            "testVariable": 351,
                            "name": "stopping_time",
                            "wizardStep": 36,
                            "stepTitle": "Stopping rules",
                            "order": 1,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "type",
                                        "label": "Type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "test",
                                                    "label": "Test",
                                                    "order": 0
                                                },
                                                {
                                                    "value": "item",
                                                    "label": "Item",
                                                    "order": 1
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "time_limit",
                                        "label": "Time limit (seconds)",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "!parent.type"
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 116,
                            "label": "Item count-based stopping rule",
                            "description": "<p>Item count-based stopping rule that will stop the test after the specified number of items is answered<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"count\":\"\"}",
                            "testVariable": 352,
                            "name": "stopping_item_count",
                            "wizardStep": 36,
                            "stepTitle": "Stopping rules",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "count",
                                        "label": "Item count limit",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 117,
                            "label": "Accuracy-based stopping rule",
                            "description": "<p>Accuracy-based stopping rule in SEM units that will stop the test when at least certain accuracy is reached<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"accuracy\":\"\"}",
                            "testVariable": 353,
                            "name": "stopping_accuracy",
                            "wizardStep": 36,
                            "stepTitle": "Stopping rules",
                            "order": 2,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "accuracy",
                                        "label": "Minimum accuracy",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 37,
                    "title": "Response bank",
                    "description": "",
                    "orderNum": 4,
                    "colsNum": 0,
                    "wizard": 15,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 118,
                            "label": "Response table",
                            "description": "<p>Response bank definition<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_time_taken_column\":{},\"custom_session_id_column\":{},\"custom_theta_column\":{},\"custom_sem_column\":{}}",
                            "testVariable": 350,
                            "name": "response_bank",
                            "wizardStep": 37,
                            "stepTitle": "Response bank",
                            "order": 0,
                            "wizard": 15,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "default",
                                                    "label": "default"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": 6,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_item_id_column",
                                        "label": "Custom item Id column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_response_column",
                                        "label": "Custom response column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_time_taken_column",
                                        "label": "Custom time taken column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_session_id_column",
                                        "label": "Custom session Id column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_theta_column",
                                        "label": "Custom theta column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    },
                                    {
                                        "type": 7,
                                        "name": "custom_sem_column",
                                        "label": "Custom SEM column",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type != \"custom\""
                                    }
                                ]
                            }
                        }
                    ]
                }
            ],
            "test": 30,
            "testObject": {
                "class_name": "Test",
                "id": 30,
                "name": "source_polyCAT",
                "accessibility": 0,
                "protected": "1",
                "archived": "0",
                "visibility": 2,
                "type": 0,
                "code": "library(catR)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"custom\") {\n    table = ib$custom_table\n    question_column = ib$custom_question_column$column\n    response_options_column = ib$custom_response_options_column$column\n    irt_discrimination_column = ib$custom_irt_discrimination_column$column\n    cb_group_column = ib$custom_cb_group_column$column\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{irt_discrimination_column}}` AS `irt_discrimination`, `{{cb_group_column}}` AS `cb_group` FROM `{{table}}`\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      irt_discrimination_column=irt_discrimination_column,\n      cb_group_column=cb_group_column,\n      table=table\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\n\ngetContent = function(question) {\n  \n  content = paragraph #don't know what this does!\n  content = paste0(content, \"<table class='polyCATResponseTable'>\")\n  content = paste0(content, \"<tr>\")\n  content = paste0(content, \"<th class='polyCATHeaderCell'><\/th>\")\n  \n  # add other header and then response cells based on how many response options there are.\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomize_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n\n    #add the table headings with the option labels\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<th class='polyCATHeaderCell'>\",option$label,\"<\/th>\")\n    }\n    \n    #next line in the table - add the question\n    content = paste0(content, \"<\/tr><tr><td class='polyCATQuestionCell'>\", question$question, \"<\/td>\")                   \n    \n    #add the response radio options to the table.\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<td class='polyCATresponseButtonCell'><label for='input_response_\",i,\"' class='polyCATLabel'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \/><\/label><\/td>\")\n    }\n                       \n    content = paste0(content, \"<\/tr><\/table>\")\n\n                       \n                       \n    return(content)\n\n  } else {\n    stop(\"Question does not have any response options\")\n    #open question\n    #content = paste0(\"<div><input type='text' name='response' style='width:100%;' \/><\/div>\")\n  }\n  \n  \n}\n\n# when the user responds to an item, it returns the Value of their response. We need to take this value and then find out what response column it refers to in the item bank (i.e. response 0? response 4?)\ngetResponseNumber = function(response = NULL, questions) {\n  print(\"matching response number\")\n  print(response)\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      if (is.null(response)) { #user did not respond to the question. Presumably the time ran out or something like that. In that case, just take the middle option.\n        print(paste0(\"Warning: User did not respond to the question. Taking option \", round((dim(options)[1] + 0.1) \/ 2, 0), \" as their response.\")) #here the first response is number 1. below it's 0 which is why we do -1.\n        return (round((dim(options)[1] + 0.1) \/ 2, 0) - 1) #do rounding because there might be an odd number of responses. R rounding takes 0.5 down to 0, so add 0.1 so that it's 0.6 and goes up to 1.\n      } else if (option$value == response) { #have we found the correct response option?\n        return (i - 1) #i - 1 because catR wants the responses to start from 0. \n      }\n    }\n    \n    stop(\"User's response did not match any of the options in the database\")\n\n  } else {\n    stop(\"Question does not have any response options\")\n  }\n\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  print(sr_accuracy)\n  print(sr_accuracy$enabled)\n  print(as.numeric(sr_accuracy$accuracy))\n  print(sem)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem) {\n  table = \"default_polycat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    theta_column = rb$custom_theta_column$column\n    sem_column = rb$custom_sem_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{theta_column}}`={{theta}}, `{{sem_column}}`={{sem}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\n# nasty function used by getParamBank to unlist the parameters from the questions storage.\nunlistParameters = function(questions) {\n  \n  param_bank = NULL\n  maxresponses = 0\n \n    #find the max number of responses (there must be an easier way to do it that doesn't involve going through each item one at a time.\n    for (i in 1:nrow(questions)) {  \n      p = questions[i,]$response_options\n\n      if(is.character(p)) { \n        p = fromJSON(p)\n      }\n      \n      if (maxresponses < length(p)) {\n        maxresponses = length(p)\n      } \n    }\n    \n    param_bank = matrix(NA, ncol=maxresponses, nrow=nrow(questions)) #set up empty matrix with max cols defined by max response options, and nrow defined by number of questions\n    \n    for (i in 1:nrow(questions)) {   \n      p = questions[i,]$response_options\n\n      if(is.character(p)) { \n        p = fromJSON(p)\n      }\n      \n      for(j in 1:length(p)) {\n        param_bank[i,j] = p[[j]]$irt_parameter #puts each parameter into the matrix one at a time.\n      } \n\n    }   \n    \n    param_bank = apply(param_bank, 2, function (x) { as.numeric(x) } ) #make it numeric\n\n    param_bank = param_bank[,-1] #get rid of first column which should just be NAs.\n  \n  return(param_bank)\n  \n}\n\n#look for any obvious mistakes in the parameter bank and give out warnings.\ncheckParamBank = function (poly_model, param_bank, questions) {\n  print(\"Parameter bank:\")\n  print(param_bank)\n  \n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    # look for any missing discriminations\n    missed = which(is.na(param_bank[,1]))\n    missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n    if (length(missing_ids) > 0) {\n    \tprint(paste0(c(\"Warning: The following item ids do not have a discrimination parameter set, as required by your model, and therefore will only be used if there are no other valid items:\", missing_ids, \". See the parameter bank above; the first column contains the discrimination parameter.\"), collapse=\" \"))\n    }\n  }\n  \n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    diffcol = 2\n  } else {\n   \tdiffcol = 1\n  }\n  \n  #look for missing difficulty parameters from first column (i.e. it will only find a problem if the first column is missing)\n  missed = which(is.na(param_bank[,diffcol]))\n  missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n  if (length(missing_ids) > 0) {\n  \tstop(paste0(c(\"The following item ids are missing a difficulty parameter for the first response option:\", missing_ids, \". See the parameter bank above.\"), collapse=\" \")) \n  }\n  return(TRUE)\n}\n\n#gets the parameter bank. Based on the type of model there are different parameters.\ngetParamBank = function(poly_model, questions) {\n  print(\"getParamBank\")\n  #print(questions)\n  #print(questions[1,]$response_options)\n  #print(poly_model)\n  \n  \n  \n  if (poly_model == \"PCM\") { #PCM has just the parameters based on number of response options - 1.\n    \n    param_bank = unlistParameters(questions)\n    \n  } else if (poly_model == \"GRM\") { #GRM has the same parameters as response options, but one of them is discrimination.\n    param_bank = unlistParameters(questions)\n       \n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n   \n  } else if (poly_model == \"GPCM\") { #GPCM has the same parameters as response options, but one of them is discrimination.\n    \n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n    \n  }\n    \n      \n  checkParamBank(poly_model, param_bank, questions)\n    \n  return(param_bank)\n  \n  \n}\n\n\nquestions = getQuestions()\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = getParamBank(poly_model, questions)\nrb = fromJSON(response_bank)\ntheta = 0\nsem = 1\nout = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = paste0(\"<div class='button_panel button_panel_cat'><button name='next' class='cat_button'>\",button_label,\"<\/button><\/div>\")\nresponse_vector = c()\n\ncurrent_item = 1\nif(item_debug == \"0\") { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      #correct = 0\n      #if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      response_vector = c(response_vector, getResponseNumber(response$response))\n      out = c(out, current_item)\n      print(paste0(\"out = \", out))\n      print(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F))\n      theta <- thetaEst(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"theta = \", theta))\n      sem <- semTheta(theta, matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"sem = \", sem))\n      saveResponse(response, question, rb, theta, sem)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)",
                "slug": "7a7347583f0258ed2160248b5173d925",
                "resumable": "0",
                "outdated": "0",
                "description": "",
                "variables": [
                    {
                        "class_name": "TestVariable",
                        "id": 346,
                        "name": "answered",
                        "type": 2,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": "0",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 347,
                        "name": "paragraph",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 348,
                        "name": "button_label",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 349,
                        "name": "item_bank",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 350,
                        "name": "response_bank",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 351,
                        "name": "stopping_time",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": "{\"enabled\":{\"value\":\"0\"},\"time_limit\":\"\",\"type\":null}",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 352,
                        "name": "stopping_item_count",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": "{\"enabled\":\"0\",\"count_limit\":\"\",\"count\":\"\"}",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 353,
                        "name": "stopping_accuracy",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": "{\"enabled\":{\"value\":\"0\"},\"accuracy\":{\"value\":\"\"}}",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 354,
                        "name": "scoring_method",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 355,
                        "name": "next_item_criterion",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 356,
                        "name": "randomesque",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 357,
                        "name": "randomize_response_options",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 358,
                        "name": "no_answer_alert",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 359,
                        "name": "session",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 360,
                        "name": "score",
                        "type": 1,
                        "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 361,
                        "name": "inserts",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 362,
                        "name": "item_debug",
                        "type": 0,
                        "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                        "passableThroughUrl": "0",
                        "value": "0",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 363,
                        "name": "out_of_time",
                        "type": 2,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 364,
                        "name": "cb",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 365,
                        "name": "title",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 366,
                        "name": "template_def",
                        "type": 0,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": "{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}",
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 367,
                        "name": "template_def",
                        "type": 1,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 368,
                        "name": "session",
                        "type": 1,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 371,
                        "name": ".branch",
                        "type": 1,
                        "description": "",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    },
                    {
                        "class_name": "TestVariable",
                        "id": 480,
                        "name": "poly_model",
                        "type": 0,
                        "description": "<p>The polytomous IRT model to use (&quot;PCM&quot;, &quot;GRM&quot; or &quot;GPCM&quot;)<\/p>\n",
                        "passableThroughUrl": "0",
                        "value": null,
                        "test": 30,
                        "parentVariable": null
                    }
                ],
                "logs": [

                ],
                "sourceWizard": null,
                "sourceWizardObject": null,
                "updatedOn": "2016-07-07 17:00:48",
                "updatedByName": "",
                "nodes": [

                ],
                "nodesConnections": [

                ],
                "tags": "",
                "owner": 1,
                "groups": "",
                "starterContent": false
            },
            "testName": "source_polyCAT",
            "updatedOn": "2016-07-07 17:10:30",
            "updatedByName": "",
            "owner": 1,
            "groups": "",
            "starterContent": false
        },
        "updatedOn": "2016-07-07 17:11:37",
        "updatedByName": "",
        "nodes": [

        ],
        "nodesConnections": [

        ],
        "tags": "_concerto_core",
        "owner": 1,
        "groups": "",
        "starterContent": true
    }
]